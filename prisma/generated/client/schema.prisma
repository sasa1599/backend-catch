// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum TicketCategory {
  VIP
  REGULAR
}

enum Category {
  concert
  sports
  theater
  fanmeet
  seminar
}

enum Location {
  jakarta
  bandung
  yogyakarta
}

enum StatusOrder {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

model Customer {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  name          String
  email         String         @unique
  password      String
  avatar        String?
  isVerify      Boolean        @default(false)
  ref_code      String?
  referred_code String?
  created_at    DateTime       @default(now())
  updated_at    DateTime?
  UserCoupon    UserCoupon[]
  UserPoint     UserPoint[]
  Order         Order[]
  Review        Review[]
  OrderDetails  OrderDetails[]
}

model UserCoupon {
  id          Int       @id @default(autoincrement())
  is_redeem   Boolean   @default(false)
  precentage  Int
  created_at  DateTime  @default(now())
  expired_at  DateTime?
  customer_id Int
  updated_at  DateTime?

  ref_code String?
  discount Int?

  customer Customer @relation(fields: [customer_id], references: [id])
}

model UserPoint {
  id             Int       @id @default(autoincrement())
  point          Int
  created_at     DateTime  @default(now())
  expired_at     DateTime?
  is_transaction Boolean   @default(false)
  customer_id    Int

  customer Customer @relation(fields: [customer_id], references: [id])
}

model OrderDetails {
  id         Int      @id @default(autoincrement())
  user_id    Int      @default(1)
  ticket_id  Int
  order_id   Int
  quantity   Int
  subPrice   Int
  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  order  Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  ticket Ticket   @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
  user   Customer @relation(fields: [user_id], references: [id])
}

model Order {
  id                     Int         @id @default(autoincrement())
  user_id                Int
  total_price            Int
  final_price            Int
  status_order           StatusOrder @default(PENDING)
  expires_at             DateTime
  updated_at             DateTime    @updatedAt
  created_at             DateTime    @default(now())
  mid_transaction_time   DateTime?
  mid_transaction_status String?
  mid_transaction_id     Int?
  mid_payment_type       String?
  mid_payment_detail     Json?

  coupon      Boolean @default(false)
  points_used Int? // Menyimpan poin yang digunakan
  discount    Int? // Menyimpan jumlah diskon dari coupon

  OrderDetails OrderDetails[]
  user         Customer       @relation(fields: [user_id], references: [id])
}

model Review {
  user_id   Int
  event_id  Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  user  Customer @relation(fields: [user_id], references: [id])
  event Event    @relation(fields: [event_id], references: [id])

  @@id([user_id, event_id])
}

model Promotor {
  id         Int       @id @default(autoincrement())
  username   String    @unique
  name       String
  email      String    @unique
  password   String
  avatar     String?
  is_verify  Boolean   @default(false)
  updated_at DateTime?
  created_at DateTime  @default(now())

  events Event[]
}

model Event {
  id              Int      @id @default(autoincrement())
  title           String
  slug            String   @default(" ")
  description     String
  category        Category
  location        Location
  venue           String
  thumbnail       String?
  datetime        DateTime
  promotor_id     Int
  updated_at      DateTime @updatedAt
  created_at      DateTime @default(now())
  coupon_promotor Int?

  tickets  Ticket[]
  Review   Review[]
  promotor Promotor @relation(fields: [promotor_id], references: [id])
}

model Ticket {
  id          Int            @id @default(autoincrement())
  category    TicketCategory
  description String
  seats       Int            @default(0)
  maxSeats    Int            @default(1)
  price       Int            @default(0)
  event_id    Int
  updated_at  DateTime       @updatedAt
  created_at  DateTime       @default(now())

  OrderDetails OrderDetails[]
  event        Event          @relation(fields: [event_id], references: [id], onDelete: Cascade)
}
